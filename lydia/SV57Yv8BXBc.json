{
    "SV57Yv8BXBc": {
        "videoId": "SV57Yv8BXBc",
        "title": "Why study theory of computation?",
        "publishedAt": "2020-04-22T05:42:32Z",
        "stats": {
            "viewCount": "97784",
            "likeCount": "3390",
            "favoriteCount": "0",
            "commentCount": "101"
        },
        "captions": "Kind: captions Language: en when students start studying theory of computation a question that often comes up is why do we have to know this compared to subjects like algorithms data structures machine learning to cryptography theory of computation just seems less practical but computer science is more than writing code compiling code fixing bugs and code compiling again and then finding going for a walk because now you have more bugs to fix in fact computer science is more than how your computer's processors and chips work at its core computer science is about one thing problem solving and this is where theory of computation really shines going beyond code and hardware we try to better understand computing and answer this one question what are the fundamental capabilities and limitations of computers can we actually solve every problem in this world through your computing we want to know this because knowing what a computer can or cannot do will help us solve problems more efficiently especially since there are indeed problems in this world that a computer can never solve no matter how much time we spend coming up with an algorithm here's an example let's say we want to write an automated test that checks if a program will eventually finish running and stop or if it will continue to run forever however our automated test that we're going to write never actually runs the program it just reads its lines of code do you think it is possible to test a code without actually executing it if you have written automated tests before you will likely say no and your intuition is right it's impossible this is an essential problem in computer science known as the halting problem in theory of computation we mathematically prove that such problems can or cannot be solved using something called models of computation a model of computation is an abstract representation of a machine so it isn't the same kind of physical machine that we use every day but like any of those machines it takes in an input and computes an output and we use these models to think about and solve problems in computing a model of computation you might have heard of before is a Turing machine developed by Alan Turing to prove how there are a lot of problems in this world that can never be solved through computing and in order for us to get comfortable with the structure and mathematical reasoning of solving these problems we will start the course by looking at much simpler models of computation first and if there is any part of you that feels like mathematical proofs sound scary or the thought of studying such theoretical and abstract material makes you nervous remember that through patience and practice you can get really really good at it everyone gets better with practice so I hope you have a little bit more context as to what theory of computation is and like the other topics in computer science it really is all about finding solutions to problems even if we solve them with abstract machines"
    }
}