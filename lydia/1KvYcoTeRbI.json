{
    "1KvYcoTeRbI": {
        "videoId": "1KvYcoTeRbI",
        "title": "Undecidable Problems: Reducibility (Part 2) | A Sample Reduction",
        "publishedAt": "2020-12-10T12:36:12Z",
        "stats": {
            "viewCount": "33129",
            "likeCount": "1016",
            "favoriteCount": "0",
            "commentCount": "55"
        },
        "captions": "Kind: captions Language: en in the last video we covered what exactly a reduction is and how we can use reductions to show that a problem is unsolvable we use the truth problem and the halting problem as examples to demonstrate how reducing the halting problem to the truth problem would show that the truth problem is undecidable and all that was left to cover was to show that we can perform the reduction which is what we will go through in this video to show that a problem is undecidable using reductions we do it through a proof by contradiction i've included the proof in writing in the description below as a reference so feel free to look at that to follow along the truth problem asks whether we can write a program that determines if another program will return true let us now assume for the sake of contradiction that there is a program that decides the truth problem we now show the reduction so this new program let's call a t will take a program as input and return true if a program returns true or return false if the program does not return true and when it does not return true it may either be because the program returned false or the program simply never stops in case you forgot the holding problem asks whether we can write a program that determines if another program halts now we build a program which we call h that uses program t to solve the halting problem we know this actually cannot be done but we assume it can be for the sake of contradiction because we want to show that we can reduce the halting problem to the truth problem so how can we build h using t we define h as follows h takes in a program as input and immediately gives it to t t then scans through the program and tells us that the program will return true or if the program does not return true at this point we know that if the program returns true the program most certainly halt it and h will return true however if t determines that the program does not return true then the program either returned false or it may have just never stopped running but to properly define h and show the reduction we need a clear description for when h returns false so to do that we may have to get a little creative if t said that the program did not return true we take the program back and change the program for every return true statement we change it to return false and for every return false statement we change it to return true by doing this and giving the modified program back to t we know that when t says it returns true this time the original program had actually returned false and therefore the program halt it but at this point if t says the modify program does not return true then we know for sure that the program does not ever return and instead keeps running which means it never halts so here we have a clear description of how program h will use program t the reduction is complete and we can finally say that this contradicts what we know since we showed that a holding problem reduces to the truth problem and we know that the halting problem is undecidable then the truth problem is also undecidable because of the truth problem was solvable and program t existed then we would have solved the halting problem reductions are tricky and definitely take time and practice to understand and perform but don't be discouraged the more proofs and examples you see the better you will be at reducing problems"
    }
}