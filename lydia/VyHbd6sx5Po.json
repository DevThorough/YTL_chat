{
    "VyHbd6sx5Po": {
        "videoId": "VyHbd6sx5Po",
        "title": "The Halting Problem: The Unsolvable Problem",
        "publishedAt": "2020-04-22T09:39:59Z",
        "stats": {
            "viewCount": "139576",
            "likeCount": "4372",
            "favoriteCount": "0",
            "commentCount": "392"
        },
        "captions": "Kind: captions Language: en computers have helped us solve and achieve many things they run complex algorithms fast and allow us to analyze incredibly large data sets to answer our questions save and access our work from anywhere and make and watch videos so as our computers become faster and more powerful is there ever a limit to what computers can do as in is there anything that even the most powerful supercomputer with an infinite amount of memory and processing power will never be able to solve in fact there are Q the halting problem the halting problem asks is it possible to write a program that determines whether another program halts by halt we mean whether it ultimately stops and exits a program that never halts is one that has an infinite loop for example Island cheering both proposed and proved that the halting problem is in fact unsolvable using a formal proof by contradiction we won't go through the formal proof but yes the idea of the proof we assume that we do in fact have a program that always correctly determines whether another program halts that's called this magical program h/h takes in another program is input and after scanning through the program it tells us if the program will halt or if the program will run forever now let's create a bigger machine D that encompasses H D is designed such that for every input it gets it gives it to H and whatever H says it does the opposite so if H days the program runs forever then D will halt and if H says that the program halts then D never halts so that's our machine D the contradiction arises when we give machine D its own program so when D takes in its own program is input it pauses it to H and H decides whether D will halt let's say H determines that D will halt but because D is designed to do the opposite of what H says then D ends up running forever even though H said D will halt this means H is wrong but we assumed in the beginning that H is always right so let's try again D takes in its own program and process it to H but this time H says D does not halt and runs forever and again because D is designed to do the opposite of what H says D halts H is wrong again but remember in the beginning we assume that this magical program H always correctly tells us if a program will halt exists but our experiment with D just showed that if H existed and we built D using H then H can be wrong this contradicts our initial assumption that H is always right therefore a program such as H that correctly determines if another program will halt cannot exist so that's the halting problem and again not even the most powerful supercomputer will be able to solve the halting problem asking a supercomputer to solve the problem would be like asking the supercomputer to come up with a triangle with four sides logically it makes no sense so yeah the halting problem is pretty significant and mind-blowing when you really think about it it's also just incredible how mathematicians and computer scientists have rigorously proved that there are problems that can never be algorithmically solved so the next time someone tells you that computers will one day solve everything just tell them about the halting problem"
    }
}