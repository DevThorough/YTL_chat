{
    "W8Uu0inPmU8": {
        "videoId": "W8Uu0inPmU8",
        "title": "Regular Languages: Nondeterministic Finite Automaton (NFA)",
        "publishedAt": "2020-04-22T08:32:36Z",
        "stats": {
            "viewCount": "54694",
            "likeCount": "1735",
            "favoriteCount": "0",
            "commentCount": "44"
        },
        "captions": "Kind: captions Language: en recall how a deterministic finite automaton takes any string as an input and for every symbol in the input we always know which state to transition to next another kind of finite automaton is called the non deterministic finite automaton or NFA for short it is called non deterministic because unlike DFAS for every symbol in the input the next state to transition into is not always determined that can be 0 or more than one state that a machine could choose to transition into for example this is a DFA which we will call m that accepts any string that contains a 1 in a third position from the end so it accepts 1 1 1 and it also accepts 1 1 0 0 but it rejects 1 0 0 0 and 1 0 1 1 the NFA that recognizes the same language will be as simple as this notice how when a 1 isn't counted q0 can choose to remain in Q 0 or it could transition into Q 1 there are also no arrows coming out of the except state Q 3 however like the DFA it still accepts 1 1 1 and it also accepts 1 1 0 0 you might have noticed how it also could have rejected 1 1 1 and 1 1 0 0 by choosing to remain in Q 0 the entire time and you aren't wrong however the NFA accepts a string as long as there is at least one path to an ascetic so although there is a path that would reject the string the NFA still accepts the string because there is another path to intercept state let's look at another example to better understand how an NFA accepts the string consider this NFA by construction this NFA would accept any string that ends with a 0 and will never accept the string that ends with a 1 so on an exam I'll input 1 0-0 it could take this path or this path and accept the string or it could take this path and reject the string however it doesn't matter which pathway and the fee decides to take as long as there exists one path that causes the machine to end in in a septate then we say the NFA accepts the string additionally anaphase can also transition on the empty string when an NFA chooses to transition on the empty string no symbol from the input string is consumed so going back to our first NFA that accepts all strings containing a 1 in the third final position let's add these two new states with an empty transition the NFA now accepts all strings containing a 1 in the third final position or it also accepts the single one what we have been looking at is a state diagram of an NFA and like DFAS nFA's are also 5 pupils when formally defined Q is a finite set of the Machine States so for our previous NFA that would be the set containing Q 0 Q 1 Q 2 Q 3 Q 4 and Q 5 Sigma is a finite set called the alphabet which is all the symbols recognized by the automaton so in this case it is the set containing 1 and 0 Delta is the transition function and because anaphase can transition on the empty string this symbol here represents everything recognized by the NFA along with the empty string and because nFA's can have zero or several choices to transition into the transition function gives us a set of possible states instead of just a single state and that's what this P of Q symbol here represents so going back to our NFA the transition function is defined like so Q 0 will remain in Q 0 on easier and only one I can choose to remain in Q zero or transition into Q one or it could empty hop over to Q for Q one can only transition into Q two on a zero and one Q two can also only transition into Q three on a zero and one and Q for transitions into Q five on a one finally for the states and symbols that have no transitions the transition function will just result in the empty set Q zero is the start state and finally F is a set of except States also known as final states which in this case is the set containing q3 and q5 you might have noticed that this seems very similar to DFAS and you might have also noticed that a DFA could probably pass as an NFA to in fact like the F ace a language recognized by an NFA is also a regular language this means that any language that a DFA recognizes can be recognized by an NFA - and for any language recognized by an NFA we can always construct a DFA that recognizes the same language isn't that a little surprising especially after seeing how different it you are constructed but our NFA is more powerful than TFA's in any way not at all non-determinism only allows us to construct machines more simply nFA's can only do as much as DFA scan so let's summarize everything that was said in this video 1 anaphase are 5q 'pls - unlike DFAS an NFA can also transition on the empty string 3 unlike DFAS again the transition function produces a set of possible states instead of a single state and finally languages recognized by an NFA are also regular languages"
    }
}